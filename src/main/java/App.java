import jdk.nashorn.internal.ir.LiteralNode;

import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        StringBuffer returnString = new StringBuffer("============= Order details =============\n");

        List<Item> items = itemRepository.findAll();
        List<SalesPromotion> promotions = salesPromotionRepository.findAll();

        List<BuyItem> buyItems = new ArrayList<>();
        Map<String,Item> buyItem = new HashMap<>();
//        Map<String,Integer> buyItemInfo = new HashMap<>();
//        Map<String,String> itemIdName = new HashMap<>();
//        HashMap<Item,Integer> buyItem = new HashMap<>();
        //分割字符串，获得每个商品的编号和数量,并以map形式存储
        for(int i = 0; i < inputs.size(); i++){
            String[] temp = (inputs.get(i)).split("x");
            BuyItem buyItem1 = new BuyItem(temp[0].trim(),Integer.parseInt(temp[1].trim()));
            buyItems.add(buyItem1);
//            buyItemInfo.put(temp[0].trim(),Integer.parseInt(temp[1].trim()));
        }

        //获得打折商品编号列表
        List<String> halfItemId = new ArrayList<>();
        for(int i = 0; i < promotions.size();i++){
            if(promotions.get(i).getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")){
                halfItemId = promotions.get(i).getRelatedItems();
            }
        }

        //遍历所有item，获得商品的价格
        for(int i = 0; i < items.size(); i++){
            Item item = items.get(i);
            buyItem.put(item.getId(),item);
//            Item item = (items.get(i));
//            Integer amount = buyItemInfo.get(item.getId());
//            if(amount !=null){
//                buyItem.put(item,amount);
//            }
//            itemIdName.put(item.getId(),item.getName());
        }



        //判断使用的优惠方案,分别计算两种优惠的价格，比较选择。
        double original = 0;
        double fullDecPromotion = 0;
        double halfPromotion = 0;
//        Set<Item> set = buyItem.keySet();
        Set<String> set = buyItem.keySet();

        for(int i = 0; i < buyItems.size(); i++){
            BuyItem temp = buyItems.get(i);
            Item item = buyItem.get(temp.getId());
            //生成购买物品信息
            returnString.append(item.getName() + " x " + temp.getAmount() + " = " + (int)item.getPrice()*temp.getAmount() + " yuan\n");
            //计算满减优惠价格
            fullDecPromotion += item.getPrice() * temp.getAmount();
            //计算半价优惠价格
            boolean halfFlag = false;
            for(int j = 0; j < halfItemId.size(); j++){
                if(item.getId().equals(halfItemId.get(j))){
                    halfFlag = true;
                    break;
                }
            }
            if(halfFlag){
                halfPromotion += item.getPrice() * temp.getAmount() * 0.5;
            }else {
                halfPromotion += item.getPrice() * temp.getAmount();
            }
        }

       /* for(Item item : set){
            int itemAmount = buyItem.get(item);
            double price = item.getPrice();

            //生成购买物品信息
            returnString.append(item.getName() + " x " + itemAmount + " = " + (int)item.getPrice()*itemAmount + " yuan\n");
            //计算满减优惠价格
            fullDecPromotion += item.getPrice() * itemAmount;
            //计算半价优惠价格
            boolean halfFlag = false;
            for(int i = 0; i < halfItemId.size(); i++){
                if(item.getId().equals(halfItemId.get(i))){
                    halfFlag = true;
                    break;
                }
            }
            if(halfFlag){
                halfPromotion += item.getPrice() * itemAmount * 0.5;
            }else {
                halfPromotion += item.getPrice() * itemAmount;
            }
        }*/
        returnString.append("-----------------------------------\n");
        original = fullDecPromotion;
        fullDecPromotion -= (int)(fullDecPromotion/30)*6;
        //判断使用哪种价格
        int switchType = 0;//0：无优惠；1：满减优惠；2：半价商品优惠
        /*
        原价(o),满减（f),半价(h)关系
        o = f = h 无优惠
        o > f = h  || o > h > f 选择满减优惠
        o > f > h 选择优惠2
        * */
        if(original == fullDecPromotion && fullDecPromotion == halfPromotion){//无优惠
            returnString.append("Total：" + (int)original + " yuan\n" +
                    "===================================");
        }else if(fullDecPromotion <= halfPromotion){//满减优惠
            returnString.append("Promotion used:\n" +
                    "满30减6 yuan，saving " +(int)(original-fullDecPromotion)+ " yuan\n" +
                    "-----------------------------------\n" +
                    "Total：" + (int)fullDecPromotion + " yuan\n" +
                    "===================================");
        }else if(halfPromotion < fullDecPromotion){//部分半价优惠
            StringBuffer halfItemList = new StringBuffer();
            for(int i = 0; i < halfItemId.size(); i++){
                halfItemList.append(buyItem.get(halfItemId.get(i)).getName());
                if(i != halfItemId.size()-1){
                    halfItemList.append("，");
                }
            }

            returnString.append("Promotion used:\n" +
                    "Half price for certain dishes (" + halfItemList + ")，saving " + (int)(original-halfPromotion) + " yuan\n" +
                    "-----------------------------------\n" +
                    "Total：" + (int)halfPromotion + " yuan\n" +
                    "===================================");
        }
        System.out.println(returnString);
        return returnString.toString();
    }
}
class BuyItem{
    private String id;
    private int amount;

    public BuyItem(String id, int amount) {
        this.id = id;
        this.amount = amount;
    }

    public String getId() {
        return id;
    }
    public int getAmount() {
        return amount;
    }

}

/*
* new Item("ITEM0001", "Braised chicken", 18.00),
            new Item("ITEM0013", "Chinese hamburger", 6.00),
            new Item("ITEM0022", "Cold noodles", 8.00),
            new Item("ITEM0030", "coca-cola", 2.00);
   new SalesPromotion("BUY_30_SAVE_6_YUAN", "Deduct 6 yuan when the order reaches 30 yuan", Arrays.asList()),
            new SalesPromotion("50%_DISCOUNT_ON_SPECIFIED_ITEMS", "Half price for certain dishes", Arrays.asList(
                    "ITEM0001", "ITEM0022"
            ))
* */
